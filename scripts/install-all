#!/bin/bash

# install-all script for Gremlin ShadTail Trader
# Complete one-script installation for the entire system

# ===================================
# WGET REMOTE INSTALLATION SECTION
# ===================================
# This allows the script to be downloaded and run directly from GitHub
# Usage: wget -qO- https://raw.githubusercontent.com/statikfintechllc/Gremlin-ShadTail-Trader/master/scripts/install-all | bash
# OR: curl -fsSL https://raw.githubusercontent.com/statikfintechllc/Gremlin-ShadTail-Trader/master/scripts/install-all | bash

# Check if we're running from a wget/curl pipe (no script file exists)
if [[ ! -f "$0" || "$0" == "bash" || "$0" == "/dev/fd/63" ]]; then
    REMOTE_INSTALL=true
    INSTALL_DIR="$HOME/gremlin-shadtail-trader"
    echo "🌐 Remote installation detected - will clone repository to $INSTALL_DIR"
    
    # Create installation directory
    mkdir -p "$INSTALL_DIR"
    cd "$INSTALL_DIR"
    
    # Clone the repository if not already present
    if [[ ! -d ".git" ]]; then
        echo "📥 Cloning Gremlin ShadTail Trader repository..."
        git clone https://github.com/statikfintechllc/Gremlin-ShadTail-Trader.git .
    else
        echo "🔄 Updating existing repository..."
        git pull origin master
    fi
    
    # Execute the local install script
    echo "🚀 Starting local installation..."
    chmod +x scripts/install-all
    exec ./scripts/install-all "$@"
    exit $?
else
    REMOTE_INSTALL=false
    echo "📁 Local installation detected"
fi

set -e  # Exit on any error

echo "🚀 Gremlin ShadTail Trader - Complete System Installation"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${MAGENTA}[INSTALL]${NC} $1"
}

print_crypto() {
    echo -e "${CYAN}[CRYPTO]${NC} $1"
}

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_ROOT"

print_header "Starting Gremlin ShadTail Trader Installation..."
print_crypto "Advanced AI Trading System with Secure Tunneling"

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   print_error "This script should not be run as root for security. Run as normal user."
   exit 1
fi

# System dependencies check and installation
print_status "Installing system dependencies..."

# Check for Ubuntu/Debian and install system packages including Tailscale
if command -v apt-get &> /dev/null; then
    print_status "Installing system packages (Ubuntu/Debian)..."
    print_warning "You may be prompted for sudo password..."
    
    # Update package lists
    sudo apt-get update
    
    # Install core system dependencies
    sudo apt-get install -y curl wget git build-essential python3 python3-pip python3-venv \
        nodejs npm imagemagick sqlite3 chromium-browser fonts-dejavu-core \
        libnss3-dev libatk-bridge2.0-dev libdrm2 libgtk-3-dev libgbm-dev \
        xvfb x11vnc fluxbox rpm apt-transport-https ca-certificates gnupg lsb-release \
        autoconf automake libtool
    
    # Install Tailscale for secure networking
    print_crypto "Installing Tailscale for secure tunnel networking..."
    curl -fsSL https://tailscale.com/install.sh | sh
    
    print_success "System dependencies installed"
fi

# Install TA-Lib for technical analysis
print_status "Installing TA-Lib for technical analysis..."
if ! ldconfig -p | grep -q "libta_lib"; then
    cd /tmp
    if [ ! -f "ta-lib-0.4.0-src.tar.gz" ]; then
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
    fi
    tar -xzf ta-lib-0.4.0-src.tar.gz
    cd ta-lib
    ./configure --prefix=/usr
    make
    sudo make install
    sudo ldconfig
    print_success "TA-Lib installed successfully"
else
    print_success "TA-Lib already installed"
fi

cd "$PROJECT_ROOT"

# Check Node.js version (minimum 18)
print_status "Checking Node.js installation..."
if ! command -v node &> /dev/null; then
    print_status "Installing Node.js 18..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
elif [[ "$(node --version | cut -d'v' -f2 | cut -d'.' -f1)" -lt "18" ]]; then
    print_warning "Node.js version is below 18, upgrading..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
fi
print_success "Node.js $(node --version) installed"

# Check Python 3.11+
print_status "Checking Python installation..."
if ! command -v python3 &> /dev/null; then
    print_error "Python 3 is not installed. Please install Python 3.11 or higher"
    exit 1
fi
PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1-2)
print_success "Python $PYTHON_VERSION found"

# Install Poetry for Python dependency management
print_status "Setting up Poetry..."
if ! command -v poetry &> /dev/null; then
    print_status "Installing Poetry..."
    curl -sSL https://install.python-poetry.org | python3 -
    export PATH="$HOME/.local/bin:$PATH"
    # Add to shell profiles
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zshrc 2>/dev/null || true
    print_success "Poetry installed"
else
    print_success "Poetry already installed"
fi

# Install project dependencies
print_header "Installing Application Dependencies..."

print_status "Installing root Node.js dependencies..."
npm install --silent

print_status "Installing frontend dependencies..."
cd frontend
npm install --silent
cd ..

print_status "Installing backend Python dependencies..."
cd backend

# Fix Poetry lock file issue
print_status "Configuring Poetry environment..."
export PATH="$HOME/.local/bin:$PATH"
poetry config virtualenvs.in-project true

# Check if lock file is outdated and regenerate if needed
if ! poetry check; then
    print_warning "Poetry lock file is outdated, regenerating..."
    poetry lock
fi

# Ensure Poetry uses the correct Python version and install dependencies
poetry env use python3
poetry install --no-root

cd ..

# Setup Tailscale
print_crypto "Configuring Tailscale secure networking..."
if ! tailscale status &> /dev/null; then
    print_status "Starting Tailscale setup..."
    print_warning "Please run: sudo tailscale up"
    print_warning "Then visit the provided URL to authenticate your device"
    print_crypto "This enables secure remote access to your trading system"
else
    print_success "Tailscale already configured"
fi

# Build the application
print_header "Building Gremlin ShadTail Trader..."

print_status "Creating professional application resources..."
mkdir -p resources

# Create professional icon if ImageMagick is available
if command -v convert &> /dev/null && [ ! -f "resources/icon.png" ]; then
    print_status "Generating professional application icon..."
    convert -size 512x512 -background "#000000" -fill "#ff6b35" -pointsize 200 \
        -gravity center label:"G" -bordercolor "#c9a96e" -border 10 resources/icon.png
    print_success "Professional icon created with theme colors"
elif [ ! -f "resources/icon.png" ]; then
    print_warning "ImageMagick not available, creating placeholder icon"
    echo "placeholder" > resources/icon.png
fi

# Build the application
print_header "Building Gremlin ShadTail Trader..."

print_status "Creating professional application resources..."
mkdir -p resources

# Create professional icon if ImageMagick is available
if command -v convert &> /dev/null && [ ! -f "resources/icon.png" ]; then
    print_status "Generating professional application icon..."
    convert -size 512x512 -background "#000000" -fill "#ff6b35" -pointsize 200 \
        -gravity center label:"G" -bordercolor "#c9a96e" -border 10 resources/icon.png
    print_success "Professional icon created with theme colors"
elif [ ! -f "resources/icon.png" ]; then
    print_warning "ImageMagick not available, creating placeholder icon"
    echo "placeholder" > resources/icon.png
fi

print_status "Building backend with Poetry and proper dependencies..."
cd backend
export PATH="$HOME/.local/bin:$PATH"
poetry config virtualenvs.in-project true
poetry install
cd ..

print_status "Building frontend with theme integration..."
npm run build:frontend

print_status "Building complete application with backend integration..."
npm run build

if [ $? -eq 0 ]; then
    print_success "Application built successfully!"
else
    print_error "Build failed! Check error messages above."
    exit 1
fi

print_status "Packaging desktop application..."
# Only package if build succeeded
if npm run package:linux; then
    print_success "Desktop application packaged successfully!"
else
    print_warning "Desktop packaging had issues, but continuing with installation..."
fi

# Setup desktop integration
print_header "Setting up Desktop Integration..."

# Create desktop file
print_status "Creating desktop application entry..."

# Make launch script executable
chmod +x scripts/launch-gremlin-trader.sh

# Create desktop shortcut
DESKTOP_DIR="$HOME/Desktop"
APPLICATIONS_DIR="$HOME/.local/share/applications"
mkdir -p "$APPLICATIONS_DIR"

# Create desktop file directly in applications directory
cat > "$APPLICATIONS_DIR/GremlinTrader.desktop" << EOF
[Desktop Entry]
Name=Gremlin ShadTail Trader
Comment=Professional AI Trading System
GenericName=Trading Platform
Exec=$PROJECT_ROOT/scripts/launch-gremlin-trader.sh
Icon=$PROJECT_ROOT/resources/icon.png
Type=Application
Categories=Office;Finance;Development;
StartupNotify=true
Terminal=false
StartupWMClass=gremlin-shadtail-trader
Keywords=trading;finance;ai;crypto;stocks;
MimeType=application/x-trading-config;
EOF

chmod +x "$APPLICATIONS_DIR/GremlinTrader.desktop"

# Also create on desktop if directory exists
if [ -d "$DESKTOP_DIR" ]; then
    cp "$APPLICATIONS_DIR/GremlinTrader.desktop" "$DESKTOP_DIR/"
    chmod +x "$DESKTOP_DIR/GremlinTrader.desktop"
    print_success "Desktop shortcut created"
fi

print_success "Desktop file created"

# Update desktop database
if command -v update-desktop-database &> /dev/null; then
    update-desktop-database "$APPLICATIONS_DIR" 2>/dev/null || true
fi

# Update icon cache
if command -v gtk-update-icon-cache &> /dev/null; then
    gtk-update-icon-cache -f -t ~/.local/share/icons 2>/dev/null || true
    gtk-update-icon-cache -f -t /usr/share/icons/hicolor 2>/dev/null || true
fi

# Final system configuration
print_header "Final System Configuration..."

print_crypto "Configuring secure environment variables..."
cat > .env << EOF
# Gremlin ShadTail Trader Configuration
NODE_ENV=production
TRADING_MODE=live
SECURITY_LEVEL=high
TAILSCALE_ENABLED=true
THEME_MODE=professional_dark
API_PORT=8000
FRONTEND_PORT=4321
EOF

print_success "Installation completed successfully!"

print_header "🎯 Gremlin ShadTail Trader Ready!"
echo ""
echo -e "${CYAN}====================================================${NC}"
echo -e "${YELLOW}       PROFESSIONAL AI TRADING SYSTEM${NC}"
echo -e "${CYAN}====================================================${NC}"
echo ""
echo -e "${GREEN}✅ Core Features Installed:${NC}"
echo "   📱 Professional Desktop Application"
echo "   🎨 Black/Gray/Red-Gold Theme UI"
echo "   🤖 Autonomous Trading Agents"
echo "   🧠 AI-Powered Signal Analysis" 
echo "   💾 ChromaDB Vector Memory Store"
echo "   📊 Real-time Market Dashboard"
echo "   🔐 Tailscale Secure Tunneling"
echo "   � Monaco Code Editor Integration"
echo ""
echo -e "${BLUE}🚀 Launch Options:${NC}"
echo "   1. Desktop Icon: 'Gremlin ShadTail Trader'"
echo "   2. Terminal: ./launch-gremlin-trader.sh"
echo "   3. Development: npm start"
echo "   4. AppImage: ./dist-electron/*.AppImage"
echo ""
echo -e "${MAGENTA}🔒 Security Setup:${NC}"
echo "   • Tailscale: sudo tailscale up"
echo "   • Environment: Production-ready"
echo "   • Theme: Professional Dark Mode"
echo ""
echo -e "${CYAN}To start immediately:${NC}"
echo "   ${YELLOW}./launch-gremlin-trader.sh${NC}"
echo ""
print_success "Ready to revolutionize your trading! 🚀📈💰"