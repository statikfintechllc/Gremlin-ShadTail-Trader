#!/bin/bash

# install-all script for Gremlin ShadTail Trader
# Complete one-script installation for the entire system

set -e  # Exit on any error

echo "ðŸš€ Gremlin ShadTail Trader - Complete System Installation"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${MAGENTA}[INSTALL]${NC} $1"
}

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_ROOT"

print_header "Starting complete system installation..."

# System dependencies check and installation
print_status "Checking system dependencies..."

# Check if ImageMagick is installed
cd /tmp && wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz && tar -xzf ta-lib-0.4.0-src.tar.gz && cd ta-lib && ./configure --prefix=/usr && make && sudo make install && sudo ldconfig


cd "$PROJECT_ROOT"

# Check for Ubuntu/Debian and install system packages
if command -v apt-get &> /dev/null; then
    print_status "Installing system packages (Ubuntu/Debian)..."
    print_status "You may be prompted for your sudo password..."
    sudo apt-get update
    sudo apt-get install -y curl wget git build-essential python3 python3-pip python3-venv \
        nodejs npm imagemagick sqlite3 chromium-browser fonts-dejavu-core \
        libnss3-dev libatk-bridge2.0-dev libdrm2 libgtk-3-dev libgbm-dev \
        xvfb x11vnc fluxbox rpm
fi

# Check if Node.js is installed (minimum version 18)
if ! command -v node &> /dev/null; then
    print_status "Installing Node.js..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
fi

# Check if npm is installed
if ! command -v npm &> /dev/null; then
    print_error "npm is not installed. Please install npm"
    exit 1
fi

# Check if Python is installed
if ! command -v python3 &> /dev/null; then
    print_error "Python 3 is not installed. Please install Python 3.11 or higher"
    exit 1
fi

# Check if Poetry is installed
if ! command -v poetry &> /dev/null; then
    print_warning "Poetry is not installed. Installing Poetry..."
    curl -sSL https://install.python-poetry.org | python3 -
    export PATH="$HOME/.local/bin:$PATH"
    # Add to shell profile
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
    echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zshrc 2>/dev/null || true
fi

print_status "Installing root dependencies..."
npm install

print_status "Installing frontend dependencies..."
cd frontend
npm install
cd ..

print_status "Installing backend dependencies with all required packages..."
cd backend

# Update pyproject.toml with all required dependencies
print_status "Updating Python dependencies..."
poetry add numpy pandas fastapi uvicorn chromadb sentence-transformers \
    yfinance pillow requests aiohttp asyncio-mqtt \
    websockets python-multipart jinja2 \
    pydantic-settings python-dotenv schedule apscheduler \
    python-jose cryptography passlib bcrypt || true

# Install with no-root
poetry install --no-root
cd ..

cd ..

print_status "Creating professional application icon..."
if [ ! -f "resources/icon.png" ]; then
    if command -v convert &> /dev/null; then
        mkdir -p resources
        convert -size 512x512 -background "#1a1a2e" -fill "#00ff88" -pointsize 300 -gravity center label:"G" resources/icon.png
        print_success "Professional icon created"
    else
        print_warning "ImageMagick not available, using fallback icon"
        # Create a basic placeholder
        mkdir -p resources
        echo "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAA==" | base64 -d > resources/icon.png 2>/dev/null || touch resources/icon.png
    fi
else
    print_success "Professional application icon already exists"
fi

print_status "Building the complete application..."
cd "$PROJECT_ROOT"
npm run build

if [ $? -eq 0 ]; then
    print_success "Application built successfully!"
else
    print_error "Build failed! Please check the error messages above."
    exit 1
fi

print_status "Packaging desktop application..."
npm run package:linux || print_warning "Desktop packaging failed, but development version available"

print_status "Setting up desktop integration..."
# Update desktop file with correct paths
CURRENT_DIR=$(pwd)
sed -i "s|/home/runner/work/Gremlin-ShadTail-Trader/Gremlin-ShadTail-Trader|$CURRENT_DIR|g" GremlinTrader.desktop
sed -i "s|/home/statiksmoke8/Gremlin-ShadTail-Trader|$CURRENT_DIR|g" GremlinTrader.desktop

# Make launch script executable
chmod +x launch-gremlin-trader.sh

# Create desktop shortcut
DESKTOP_DIR="$HOME/Desktop"
APPLICATIONS_DIR="$HOME/.local/share/applications"
mkdir -p "$APPLICATIONS_DIR"

if [ -d "$DESKTOP_DIR" ]; then
    cp GremlinTrader.desktop "$DESKTOP_DIR/"
    chmod +x "$DESKTOP_DIR/GremlinTrader.desktop"
    print_success "Desktop shortcut created"
fi

cp GremlinTrader.desktop "$APPLICATIONS_DIR/"
chmod +x "$APPLICATIONS_DIR/GremlinTrader.desktop"

# Update desktop database
if command -v update-desktop-database &> /dev/null; then
    update-desktop-database "$APPLICATIONS_DIR" 2>/dev/null || true
fi

# Update icon cache
if command -v gtk-update-icon-cache &> /dev/null; then
    gtk-update-icon-cache -f -t ~/.local/share/icons 2>/dev/null || true
    gtk-update-icon-cache -f -t /usr/share/icons/hicolor 2>/dev/null || true
fi

print_success "All dependencies installed successfully!"
print_success "Complete system installation finished!"

print_header "Available launch options:"
echo "  1. Desktop Icon: Click 'Gremlin ShadTail Trader' on your desktop"
echo "  2. Applications Menu: Office â†’ Finance â†’ Gremlin ShadTail Trader"
echo "  3. Terminal: ./launch-gremlin-trader.sh"
echo "  4. Development: npm run start"
echo "  5. AppImage: ./dist-electron/*.AppImage (if available)"

print_header "System Overview:"
echo "  ðŸ“± Professional Desktop Application"
echo "  ðŸŽ¨ Dark Theme UI (Grok/OpenAI style)"
echo "  ðŸ¤– Autonomous Trading Agents"
echo "  ðŸ§  AI-Powered Signal Analysis"
echo "  ðŸ’¾ Unified ChromaDB Vector Store"
echo "  ðŸ“Š Real-time Market Dashboard"
echo "  ðŸ”„ Background Trading Operations"

print_status "To get started immediately:"
echo "  ./launch-gremlin-trader.sh"

print_success "Setup complete! Gremlin ShadTail Trader is ready! ðŸš€ðŸ“ˆ"