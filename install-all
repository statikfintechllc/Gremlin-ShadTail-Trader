#!/bin/bash

# ─────────────────────────────────────────────────────────────
# Gremlin ShadTail Trader - Complete Build & Installation System
# ─────────────────────────────────────────────────────────────
# This script builds a fully functional desktop trading application
# Usage: ./install-all
# Result: Complete desktop app ready to launch
# ─────────────────────────────────────────────────────────────

set -e  # Exit on any error

echo "🚀 GREMLIN SHADTAIL TRADER - COMPLETE BUILD SYSTEM"
echo "Building complete functional trading application..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_header() { echo -e "${MAGENTA}=== $1 ===${NC}"; }
print_step() { echo -e "${CYAN}[STEP]${NC} $1"; }

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
cd "$PROJECT_ROOT"

# Create installation log
INSTALL_LOG="$PROJECT_ROOT/install-complete.log"
exec > >(tee -a "$INSTALL_LOG") 2>&1

print_header "SYSTEM REQUIREMENTS CHECK"

# Check for required system commands
check_command() {
    if ! command -v "$1" &> /dev/null; then
        print_error "$1 is required but not installed."
        if [[ "$1" == "node" ]]; then
            print_status "Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
        elif [[ "$1" == "python3" ]]; then
            print_status "Installing Python 3..."
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip python3-venv
        elif [[ "$1" == "git" ]]; then
            print_status "Installing Git..."
            sudo apt-get install -y git
        fi
    else
        print_success "$1 is installed"
    fi
}

# Check required commands
check_command "python3"
check_command "node"
check_command "npm"
check_command "git"

print_header "PYTHON BACKEND SETUP"

# Navigate to backend directory
cd "$PROJECT_ROOT/backend"

# Check if Poetry is installed
if ! command -v poetry &> /dev/null; then
    print_status "Installing Poetry..."
    curl -sSL https://install.python-poetry.org | python3 -
    export PATH="$HOME/.local/bin:$PATH"
fi

print_step "Installing Python dependencies with Poetry..."
poetry install

print_step "Verifying yfinance and trading libraries..."
poetry run python -c "
import yfinance as yf
import pandas as pd
import numpy as np
print('✓ yfinance working:', yf.Ticker('AAPL').info['symbol'])
print('✓ pandas working:', pd.__version__)
print('✓ numpy working:', np.__version__)
"

print_success "Backend dependencies installed successfully"

print_header "FRONTEND SETUP"

# Navigate to frontend directory
cd "$PROJECT_ROOT/frontend"

print_step "Installing Node.js dependencies..."
npm install

print_step "Installing additional UI dependencies..."
npm install @monaco-editor/react @radix-ui/react-switch lucide-react

print_step "Building frontend application..."
npm run build

print_success "Frontend built successfully"

print_header "ELECTRON DESKTOP APP BUILD"

# Navigate back to project root
cd "$PROJECT_ROOT"

print_step "Installing Electron and build dependencies..."
npm install

print_step "Building Electron desktop application..."
npm run build

print_step "Packaging desktop application..."
npm run dist

print_success "Desktop application packaged successfully"

print_header "CREATING LAUNCH SCRIPTS"

# Create enhanced launch script
cat > "$PROJECT_ROOT/launch-gremlin-trader.sh" << 'EOF'
#!/bin/bash

# Gremlin ShadTail Trader - Application Launcher
# This script starts the complete trading application

PROJECT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
cd "$PROJECT_ROOT"

echo "🚀 Starting Gremlin ShadTail Trader..."

# Function to cleanup on exit
cleanup() {
    echo "Shutting down Gremlin Trader..."
    if [[ -n $BACKEND_PID ]]; then
        kill $BACKEND_PID 2>/dev/null || true
    fi
    if [[ -n $FRONTEND_PID ]]; then
        kill $FRONTEND_PID 2>/dev/null || true
    fi
    exit 0
}

trap cleanup SIGINT SIGTERM EXIT

# Start backend server
echo "Starting backend server..."
cd "$PROJECT_ROOT/backend"
poetry run python dashboard_backend/server.py &
BACKEND_PID=$!

# Wait for backend to start
echo "Waiting for backend to initialize..."
sleep 5

# Check if desktop app exists, otherwise start dev mode
if [[ -f "$PROJECT_ROOT/dist-electron/linux-unpacked/gremlin-shadtail-trader" ]]; then
    echo "Launching desktop application..."
    "$PROJECT_ROOT/dist-electron/linux-unpacked/gremlin-shadtail-trader" &
    APP_PID=$!
    
    echo "✅ Gremlin ShadTail Trader launched successfully!"
    echo "Desktop app running with backend server"
    
    # Wait for desktop app
    wait $APP_PID
else
    echo "Desktop app not found, starting development mode..."
    cd "$PROJECT_ROOT/frontend"
    npm run dev &
    FRONTEND_PID=$!
    
    echo "✅ Gremlin ShadTail Trader running in development mode!"
    echo "Frontend: http://localhost:4321"
    echo "Backend: http://localhost:8000"
    echo "Press Ctrl+C to stop"
    
    # Wait for processes
    wait
fi
EOF

chmod +x "$PROJECT_ROOT/launch-gremlin-trader.sh"

print_header "CREATING DESKTOP INTEGRATION"

# Create desktop entry
cat > "$PROJECT_ROOT/GremlinTrader.desktop" << EOF
[Desktop Entry]
Name=Gremlin ShadTail Trader
Comment=AI-Powered Trading System with Real Market Data
Exec=$PROJECT_ROOT/launch-gremlin-trader.sh
Icon=$PROJECT_ROOT/resources/icon.png
Terminal=false
Type=Application
Categories=Office;Finance;Development;
StartupNotify=true
Keywords=trading;finance;ai;market;stocks;
EOF

# Make desktop file executable
chmod +x "$PROJECT_ROOT/GremlinTrader.desktop"

# Copy to desktop and applications if possible
if [[ -d "$HOME/Desktop" ]]; then
    cp "$PROJECT_ROOT/GremlinTrader.desktop" "$HOME/Desktop/"
    print_success "Desktop shortcut created"
fi

if [[ -d "$HOME/.local/share/applications" ]]; then
    cp "$PROJECT_ROOT/GremlinTrader.desktop" "$HOME/.local/share/applications/"
    print_success "Application menu entry created"
fi

print_header "SYSTEM INTEGRATION COMPLETE"

# Create system status script
cat > "$PROJECT_ROOT/check-system.sh" << 'EOF'
#!/bin/bash

echo "🔍 Gremlin ShadTail Trader - System Status Check"

PROJECT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
cd "$PROJECT_ROOT"

echo ""
echo "=== Backend Status ==="
cd backend
if poetry run python -c "
try:
    import yfinance as yf
    import requests
    print('✅ Backend dependencies: OK')
    print('✅ yfinance: OK')
    # Test market data
    ticker = yf.Ticker('AAPL')
    data = ticker.history(period='1d')
    if not data.empty:
        print('✅ Real market data: WORKING')
        print(f'   AAPL price: \${data[\"Close\"].iloc[-1]:.2f}')
    else:
        print('⚠️  Real market data: No data returned')
except Exception as e:
    print(f'❌ Backend error: {e}')
"; then
    echo "Backend: READY"
else
    echo "Backend: ERROR"
fi

echo ""
echo "=== Frontend Status ==="
cd ../frontend
if [[ -d "node_modules" && -d "dist" ]]; then
    echo "✅ Frontend dependencies: OK"
    echo "✅ Frontend build: OK"
else
    echo "❌ Frontend: Missing dependencies or build"
fi

echo ""
echo "=== Desktop App Status ==="
cd ..
if [[ -f "dist-electron/linux-unpacked/gremlin-shadtail-trader" ]]; then
    echo "✅ Desktop app: BUILT"
    echo "✅ Ready to launch"
else
    echo "⚠️  Desktop app: Not built (development mode available)"
fi

echo ""
echo "=== Launch Options ==="
echo "1. Desktop App: ./launch-gremlin-trader.sh"
echo "2. Desktop Icon: Double-click Gremlin Trader icon"
echo "3. Development: cd frontend && npm run dev"
echo ""
echo "API Endpoints Available:"
echo "- http://localhost:8000/api/feed/real (Real market data)"
echo "- http://localhost:8000/api/market/overview (Market overview)"
echo "- http://localhost:8000/api/market/stocks (Live stock data)"
EOF

chmod +x "$PROJECT_ROOT/check-system.sh"

print_header "🎉 INSTALLATION COMPLETE!"

echo ""
echo "╔═══════════════════════════════════════════════════════════════╗"
echo "║                    GREMLIN SHADTAIL TRADER                   ║"
echo "║                   FULLY FUNCTIONAL SYSTEM                    ║"
echo "╠═══════════════════════════════════════════════════════════════╣"
echo "║                                                               ║"
echo "║  ✅ REAL MARKET DATA - Live yfinance integration             ║"
echo "║  ✅ COMPLETE BACKEND - FastAPI with real trading data        ║"
echo "║  ✅ MODERN FRONTEND - React/Astro with real-time updates     ║"
echo "║  ✅ DESKTOP APPLICATION - Electron app ready to launch       ║"
echo "║  ✅ MONACO EDITOR - Full source code editing capabilities    ║"
echo "║  ✅ AGENT SYSTEM - Real agent coordination and memory        ║"
echo "║                                                               ║"
echo "╠═══════════════════════════════════════════════════════════════╣"
echo "║                        HOW TO LAUNCH                         ║"
echo "╠═══════════════════════════════════════════════════════════════╣"
echo "║                                                               ║"
echo "║  🖱️  DESKTOP ICON: Double-click 'Gremlin Trader' icon        ║"
echo "║  💻 COMMAND LINE: ./launch-gremlin-trader.sh                 ║"
echo "║  🔧 DEVELOPMENT: cd frontend && npm run dev                   ║"
echo "║                                                               ║"
echo "╠═══════════════════════════════════════════════════════════════╣"
echo "║                      SYSTEM FEATURES                         ║"
echo "╠═══════════════════════════════════════════════════════════════╣"
echo "║                                                               ║"
echo "║  📊 Real-time market data from Yahoo Finance                 ║"
echo "║  🤖 AI-powered trading signals and analysis                  ║"
echo "║  📈 Technical indicators (RSI, MACD, Bollinger Bands)        ║"
echo "║  💾 Vector memory system with ChromaDB                       ║"
echo "║  🔧 Monaco editor for live code editing                      ║"
echo "║  🎯 Agent coordination and task management                   ║"
echo "║  📱 Modern responsive UI with dark theme                     ║"
echo "║                                                               ║"
echo "╚═══════════════════════════════════════════════════════════════╝"
echo ""

print_success "System check script created: ./check-system.sh"
print_success "Launch script created: ./launch-gremlin-trader.sh"
print_success "Desktop integration complete"

echo ""
print_header "NEXT STEPS"
echo "1. Run system check: ./check-system.sh"
echo "2. Launch application: ./launch-gremlin-trader.sh"
echo "3. Access real market data at: http://localhost:8000/api/feed/real"
echo ""

# Run system check
print_step "Running final system verification..."
"$PROJECT_ROOT/check-system.sh"

print_success "🎉 GREMLIN SHADTAIL TRADER BUILD COMPLETE!"
print_success "Ready to launch - use desktop icon or ./launch-gremlin-trader.sh"

echo ""
echo "Installation log saved to: $INSTALL_LOG"
